#!/usr/bin/env python3
import sys
import re
import random
import time
import logging
from threading import Thread
from time import sleep

class Master(process):
	def setup(server_bank_chain,client_bank_chain):
		self.master_id = self.id._address[1]
		self.active_server_list = {}
		self.logger = logging.getLogger()
	def main():
		logfile = 'master_'+str(master_id)+'.log'
		fh = logging.FileHandler(logfile)
		formatter = logging.Formatter('%(asctime)s - %(processName)s - %(message)s')
		fh.setFormatter(formatter)
		logger.addHandler(fh)
		logger.setLevel(logging.INFO)
		ch = logger.handlers[0]
		ch.setLevel(logging.CRITICAL)
		ch.setFormatter(formatter)
		logger.addHandler(ch)
		logger.critical('server_bank_chain:'+str(server_bank_chain))
		reset_list()
		#thread = Thread(target = check_server)
		#thread.start()
		
		#await(False)
		while True:
			status = ''
			if (await(False)):pass
			elif timeout(10):
				#see the state of active server list .
				logger.critical('Active_server_list:'+str(active_server_list))
				for i in active_server_list:
					for index,j in enumerate(active_server_list[i]):
						if j == 0:
							status = 'failed'
							fail_server_bank = i
							fail_server_index = index	
				if status != 'failed':
					logger.critical('All good!!:'+str(active_server_list))
					reset_list()
					logger.critical('After Reset!!:'+str(active_server_list))
				else:
					logger.critical('Some thing bad!!:'+str(active_server_list)+' bankname:'+str(fail_server_bank)+' index:'+str(fail_server_index))	
					handle_failure(fail_server_bank,fail_server_index)
						
	def handle_failure(bankname,server_index):
		#Decide which server is failed i.e head,tail or internal server
		if server_index == 0:
			#Head failed
			#sucessor of current head is new head , remove failed head from the list
			logger.critical('Head Failed:'+str(server_bank_chain[bankname][server_index]))
			if server_bank_chain[bankname][server_index+1] is not None:
				newhead = server_bank_chain[bankname][server_index+1]
				del server_bank_chain[bankname][server_index]
				logger.critical('Changed list:'+str(server_bank_chain[bankname]))
				send(('NewHead',newhead),to=client_bank_chain[bankname])

		elif server_index == len(server_bank_chain[bankname]) - 1:
			#Tail failed
			logger.critical('Tail Failed:'+str(server_bank_chain[bankname][server_index]))
			newtail = server_bank_chain[bankname][server_index-1]
			del server_bank_chain[bankname][server_index]
			logger.critical('Changed list:'+str(server_bank_chain[bankname]))
			send(('NewTail',newtail),to=client_bank_chain[bankname])
		else:
			#Internal server failed
			if server_bank_chain[bankname][server_index+1] is not None:
				s_plus = server_bank_chain[bankname][server_index+1]
			if server_bank_chain[bankname][server_index-1] is not None:
				new_predecessor = s_minus = server_bank_chain[bankname][server_index-1]
			del server_bank_chain[bankname][server_index]
			send(('S-crash-to-S+',new_predecessor),to=s_plus)
			#Check here
			if await(some(received(('Lastupdate',last_update), from_=s_plus))):
				send(('S-crash-to-S-',last_update,s_plus),to=s_minus)
				break
			elif timeout(10):
				logger.critical('Some thing wrong...')	
			logger.critical('Internal Server Failed:'+str(server_bank_chain[bankname][server_index]))
	def reset_list():
		for name in server_bank_chain:
			active_server_list[name] = [0 for i in range(len(server_bank_chain[name]))]

	#Receive message from each server	
	def receive(msg=('Alive',bankname),from_=s):
		if bankname in server_bank_chain:
			active_server_list[bankname][server_bank_chain[bankname].index(s)] = 1
		logger.critical('in receive of master:From:'+str(s))
		logger.critical('in receive of master:From:'+str(bankname))

	
	def receive(msg=('Lastupdate',last_update),from_=s):
		logger.critical('Lastupdate from S-plus:'+str(last_update))
		

class Client(process):

	def setup(bankname,reply_wait,num_retry,req_details,head,tail,master):
		self.client_id = self.id._address[1]
		self.logger = logging.getLogger()
	def main():
		
		#Intialize and set properties to logger for logging mechanism
		logfile = 'client_'+str(client_id)+'_'+bankname+'.log'
		fh = logging.FileHandler(logfile)
		formatter = logging.Formatter('%(asctime)s - %(processName)s - %(message)s')
		fh.setFormatter(formatter)
		logger.addHandler(fh)
		logger.setLevel(logging.INFO)
		ch = logger.handlers[0]
		ch.setLevel(logging.CRITICAL)
		ch.setFormatter(formatter)
		logger.addHandler(ch)	
		
		#Client Level Information
		logging.info('Client id:'+str(client_id))
		logging.info('Generating log file:'+logfile)
		logger.info('Bank Name:'+bankname+' Reply Wait:'+str(reply_wait)+' No.Retry:'+str(num_retry))

		if req_details[0] == 'random':
			seed,numreq,prob_bal,prob_dep,prob_withdraw = req_details[1:]
			logger.info('Request Type:'+req_details[0])
			logger.info('Seed:'+str(seed)+' NumReq:'+str(numreq)+' Prob_Bal:'+str(prob_bal)+' Prob_Dep:'+str(prob_dep)+' Prob_Withdraw:'+str(prob_withdraw))
			weight = {}
			weight['getbalance'], weight['deposit'], weight['withdraw']  = int(prob_bal * 100), int(prob_dep * 100), int(prob_withdraw * 100)
			choice_list = [s for s in weight for i in range(weight[s])]
			random.seed(seed)
			for i in range(numreq):
				ops = random.choice(choice_list)
				seq_no = random.randint(10,100)
				account_no = random.randint(100000,999999)
				if ops == 'getbalance':
					amount = None
					server = tail
				else:
					server = head
					amount = random.randint(1,500)
				req_id = '.'.join((bankname,str(client_id),str(seq_no)))
				logger.critical('Request to Server: Operation: '+ops+'  account_no:'+str(account_no)+'  req_id:'+req_id+'  amount:'+str(amount))
				while num_retry > 0:
					send(('FromClient',ops,[account_no,req_id,amount]), to=server)
					t = logical_clock()
					if await(some(received(('Toclient',reply,time), from_=p), has=(req_id in reply and account_no in reply and t<time))):
						break
					elif timeout(reply_wait):
						logger.critical('Oops Timeout.. resending for:'+'ops:'+ops+' account_no:'+str(account_no)+' req_id:'+req_id+' amount:'+str(amount))
						num_retry -= 1
				
		else:
			requests = req_details[1:]
			logger.info('Request Type:'+req_details[0])
			for req in requests:
				logger.info('Request Information:'+str(req))
			for req in requests:
				if len(req.strip().split(',')) == 3:
					ops,req_id,account_no = req.strip().split(',')
					amount = None
					account_no = int(account_no)
					server = tail
				else:
					ops,req_id,account_no,amount = req.strip().split(',')
					amount,account_no = int(amount),int(account_no)
					server = head
				logging.critical('Request to Server: Operation:'+ops+'  account_no:'+str(account_no)+'  req_id:'+req_id+'  amount:'+str(amount))
				while num_retry > 0:
					send(('FromClient',ops,[account_no,req_id,amount]), to=server)
					t = logical_clock()
					if await(some(received(('Toclient',reply,time), from_=p), has=(req_id in reply and account_no in reply and t<time))):
						break
					elif timeout(reply_wait):
						logging.critical('Oops Timeout.. resending for:'+'ops:'+ops+' account_no:'+str(account_no)+' req_id:'+req_id+' amount:'+str(amount))
						num_retry -= 1
		logging.info('Client Terminating .. all requests served!')
		await(True)
	def receive(msg=('Toclient',reply,time),from_=p):
		logging.critical('Reply from Server :'+str(reply))
	
	def receive(msg=('NewHead',newhead),from_=p):
		head = newhead

	def receive(msg=('NewTail',newtail),from_=p):
		tail = newtail		
class Server(process):
	
	def setup(bankname,startupdelay,serverlifetime,successor,predecessor,master):
		self.server_id = self.id._address[1]
		self.account_details = {}
		self.send_msg_no = 0
		self.receive_msg_no = 0
		self.logger = logging.getLogger()
		self.currentTrans = []
		self.updateno = 0

	def main():
		#Logging init setup , Different log levels for files and consoles
		logfile = 'server_'+str(server_id)+'.log'
		fh = logging.FileHandler(logfile)
		formatter = logging.Formatter('%(asctime)s - %(processName)s - %(message)s')
		fh.setFormatter(formatter)
		logger.addHandler(fh)
		logger.setLevel(logging.INFO)
		ch = logger.handlers[0]
		ch.setLevel(logging.CRITICAL)
		ch.setFormatter(formatter)
		logger.addHandler(ch)
		
		thread = Thread(target = ping_master, args = (10, ))
		thread.start()
		logger.critical('thread started')
		logger.info('Server Id:'+str(server_id))
		logger.info('Belongs to:'+str(bankname))
		logger.info('Predecessor id:'+str(predecessor))
		logger.info('Sucessor id:'+str(successor))
		if predecessor is None:
			logger.info('I am the Head !!')
		elif successor is None:
			logger.info('I am the Tail !!')

		if serverlifetime[0] == 'receive':
			logger.info('Life Time:'+' Terminates after ' + str(serverlifetime[1])+' received messages')
			count = int(serverlifetime[1])
			await((len(listof(p, received(('FromClient',ops,values), from_=p))) + len(listof(p, received(('FromServer',account_no,status,client), from_=p)))) == count)
		elif serverlifetime[0] == 'send':
			logger.info('Life Time:'+' Terminates after '+str(serverlifetime[1])+' send messages')
			count = int(serverlifetime[1])
			await((len(listof(reply, sent(('Toclient',reply), to=p))) + len(listof(p, sent(('FromServer',account_no,status,p), to=p)))) == count)
		else:
			logger.info('Life Time: Server never terminates!')
			await(False)

	def ping_master(arg):
		logger.critical('In ping_master!!')
		while True:
			if (await(False)):
				#logger.critical('Always here!')
				pass
			elif timeout(2):
				logger.critical('Now here!')
				send(('Alive',bankname),to=master)
				
					
	#Receive from client
	def receive(msg=('FromClient',ops,values),from_=p):
		logger = logging.getLogger()
		logger.critical('values***:'+str(values))
		account_no,req_id,amount = values
		logger.info('Req_id:'+str(req_id)+' Account:'+str(account_no)+' Amount:'+str(amount)+' Operation:'+ops)
		if isAccountExists(account_no) is False:
			createAccount(account_no)
		receive_msg_no +=1
		send_msg_no +=1
		logger.info('Received no of messages:'+str(receive_msg_no))
		logger.info('Sent no of messages:'+str(send_msg_no))
		if ops == 'getbalance':
			logging.info('before getbalance operation: Account No:'+str(account_no)+' Current Balance:'+str(self.account_details[account_no].balance))
			reply = getBalance(req_id,account_no)
			logging.info('send reply to client:'+str(p))
			send(('Toclient',reply,logical_clock()),to=p)

		elif ops == 'deposit':
			logging.info('before deposit operation: Account No:'+str(account_no)+' Current Balance:'+str(self.account_details[account_no].balance))
			status = deposit(req_id,account_no,amount)
			logging.critical('Status of operation:'+str(status))

		elif ops == 'withdraw':
			logging.info('before withdraw operation: Account No:'+str(account_no)+' Current Balance:'+str(self.account_details[account_no].balance))
			status = withdraw(req_id,account_no,amount)
			logging.critical('Status of operation:'+str(status))

		if successor is None and ops != 'getbalance':
			logging.info('send reply to client:'+str(p))
			send(('Toclient',status[1],logical_clock()),to=p)

		elif ops != 'getbalance':
			updateno += 1
			logging.info('Forward request to its successor:'+str(successor))
			currentTrans.append((updateno,account_no,status,p))
			send(('FromServer',updateno,account_no,status,p),to=successor)
				
	#receive from another server
	def receive(msg=('FromServer',latestupno,account_no,status,client),from_=s):
		logging.info('Request received from its predecessor:'+str(predecessor))
		logging.info('Req id :'+str(status[1][0]))
		updateno = latestupno
		if isAccountExists(account_no) is False:
			createAccount(account_no)
		receive_msg_no +=1
		send_msg_no +=1
		logger.info('Received no of messages:'+str(receive_msg_no))
		logger.info('Sent no of messages:'+str(send_msg_no))
		if status[0] == 'valid':
			logging.info('Operation is valid so update its internal data structures')
			current_account = self.account_details[account_no]
			current_account.balance = status[2]
			
			current_account.processedTrans.append(status[3])
			#current_account.currentTrans.append(status[3])
			logger.info('After updating: Account No:'+str(account_no)+' Current Balance:'+str(self.account_details[account_no].balance))
		else:
			logging.info('Operation is invalid ! Just pass on request ..')

		#in case status not valid , just pass on to other servers
		logger.critical('Status of operation  '+str(server_id) +':'+str(status))
		if successor is None:
			logging.info('send reply to client:'+str(client))
			send(('Toclient',status[1],logical_clock()),to=client)
			send(('Ack',updateno),to=predecessor)
		else:
			logging.info('Forward request to its successor:'+str(successor))
			currentTrans.append((updateno,account_no,status,client))
			send(('FromServer',updateno,account_no,status,client),to=successor)

	def receive(msg=('Ack',updateno),from_=s):
		#Remove transactions from currentTrans if updateno is given one or less than given(old  no's)
		currentTrans = [item for item in currentTrans if item[0] > updateno]
		if predecessor is not None:
			send(('Ack',updateno),to=predecessor)
	
	#Internal Server failure , Receive message from Master(to S plus)
	def receive(msg=('S-crash-to-S+,newPredecessor'),from_=s):
		predecessor = newPredecessor
		send(('Lastupdate',updateno),to=master)

	#Internal Server Failure , Receive message from Master(to S minus) about last update of S+ and its new successor(i.e S+)
	def receive(msg=('S-crash-to-S-',last_update,newSuccessor),from_=s):	
		successor = newSuccessor
		#Suspend processing of this server for some time -- To do
		for item in currentTrans:
			if item[0] > last_update:
				#Check
				send(('FromServer',item[0],item[1],item[2],item[3]),to=successor)
	send(('S-crash-to-S-',last_update,s_plus),to=s_minus)
	def getBalance(req_id,account_no):
		if isAccountExists(account_no) is False:
                        createAccount(account_no)
		reply = (req_id,account_no,'Processed',self.account_details[account_no].balance)
		return reply
		
	def deposit(req_id,account_no,amount):
		current_account = self.account_details[account_no]
		if verifyTransaction(req_id,'D',account_no,amount) == 1:
			current_account.balance	+= amount
			current_account.processedTrans.append((req_id,'D',amount))
			#current_account.currentTrans.append((req_id,'D',amount))
			status =  ('valid',(req_id,account_no,'Processed',current_account.balance),current_account.balance,(req_id,'D',amount))
		elif verifyTransaction(req_id,'D',account_no,amount) == -1:
			status =  ('invalid',(req_id,account_no,'InconsistenWithHistory',current_account.balance))
		else:
			status = ('duplicate',(req_id,account_no,'Processed',current_account.balance))

		return status
	def withdraw(req_id,account_no,amount):
		current_account = self.account_details[account_no]
		if verifyTransaction(req_id,'W',account_no,amount) == 1:
			if current_account.balance < amount:
				status = ('invalid',(req_id,account_no,'InsufficientFunds',current_account.balance))
			else:
				current_account.balance -= amount
				current_account.processedTrans.append((req_id,'W',amount))
				#current_account.currentTrans.append((req_id,'W',amount))
				status =  ('valid',(req_id,account_no,'Processed',current_account.balance),current_account.balance,(req_id,'W',amount))
		elif verifyTransaction(req_id,'W',account_no,amount) == -1:
			status =  ('invalid',(req_id,account_no,'InconsistenWithHistory',current_account.balance))
		else:
                        status = ('duplicate',(req_id,account_no,'Processed',current_account.balance))
		return status
	
	def verifyTransaction(req_id,ops,account_no,amount):
		if account_no in self.account_details:
			#Check - condition may change also may require to check in currentTrans
			if (req_id,ops,amount) in self.account_details[account_no].processedTrans:
				return 0
			elif req_id in [self.account_details[account_no].processedTrans[i][0] for i,j in enumerate(self.account_details[account_no].processedTrans)]:		
				return -1
			else:
				return 1
				
		
	def isAccountExists(account_no):
		if account_no in self.account_details:
			logging.info('Account Exists!')
			return True
		logging.info('Account Not Exists!')
		return False
			
	def createAccount(account_no):
		logging.info('Creating Account!')
		self.account_details[account_no] = Account(0,[])
class Account:
	def __init__(self,balance,processedTrans=[]):
		self.balance = balance
		self.processedTrans = processedTrans

class Client_Details:

	def __init__(self,bankname,reply_wait,num_retry,request_details):
		self.bankname = bankname
		self.reply_wait = reply_wait
		self.num_retry = num_retry
		self.request_details = request_details

class Server_Details:

	def __init__(self,startupdelay,serverlifetime):
		self.startupdelay = startupdelay
		self.serverlifetime = serverlifetime

class Bank_Details:
	def __init__(self,bankname,chainlen,no_clients,client,server):
		self.bankname = bankname
		self.chainlen = chainlen
		self.no_clients = no_clients
		self.client = client
		self.server = server
		
def main():
	#config_file = '/Users/NafeesAhmed/Documents/async_project/chainreplication/config/test1_config.txt'
	config_file = sys.argv[1] 
	bank_list = []
	f = open(config_file)
	lines = f.readlines()
	request_details = {}
	client_no = 0
	Request_Type = None
	config(clock = 'Lamport')
	for line in lines:
			line = line.strip()
			if len(line) == 0 or line.startswith('#') or line.startswith('<Bank-Start>'):
				continue	
			if line.startswith('Banks'):
				num_banks = line.split(':')[1]

			if line.startswith('Bank_Name:'):
				bank_name = line.split(':')[1]	
			
			if line.startswith('Start_Up_Delay:'):
				start_up_delay = line.split(':')[1]
	
			if line.startswith('Len_of_chain:'):
                                chain_len = int(line.split(':')[1])
			
			if line.startswith('No_Clients:'):
                                no_clients = int(line.split(':')[1])
		
			if line.startswith('Server_Life_time:'):
				server_life_time = re.sub(r'[()]','',line.split(':')[1]).split(',')
				
			if line.startswith('reply_wait:'):
                                reply_wait = float(line.split(':')[1])

			if line.startswith('num_retry:'):
                                num_retry = int(line.split(':')[1])

			if line.startswith('Random:'):
				Request_Type = 'Random'
				temp = line.split(':')[1]
				seed,numReq,probgetbal,probgetdep,probgetwithdraw = re.sub(r'[()]','',temp).strip().split(',')
				request_details = ['random',int(seed),int(numReq),float(probgetbal),float(probgetdep),float(probgetwithdraw)]

			if line.startswith('<Itemized_Start'):
				Request_Type = 'Itemized'
				request_list = ['itemized']

			match = re.search(r'\[(.*)\]',line.strip())
			
			if match:
				request_list.append(match.group(1))
			
			if line.startswith('<Itemized_End'):
				request_details[client_no] = request_list
				client_no += 1

			if line.startswith('<Bank-End>'):
				client = Client_Details(bank_name,reply_wait,num_retry,request_details)
				server = Server_Details(start_up_delay,server_life_time)
				bank = Bank_Details(bank_name,chain_len,no_clients,client,server)
				bank_list.append(bank)
	f.close()
	#For Master Process
	bank_server_chain = {}
	bank_client_chain = {}
	#Do validation for no of banks
	#Create client process for each bank
	master = new(Master,num = 1)
	for item in bank_list:
		server_list = list(new(Server,num = item.chainlen))
		bank_server_chain[item.bankname] = server_list
		for index,server in enumerate(server_list):
			#Server is Head
			if index == 0 and len(server_list) > 1:
				predecessor = None
				successor = server_list[index+1]
			elif index == 0 and len(server_list) == 1:
				predecessor = None
				successor = None
			#Server is Tail
			elif index == len(server_list)-1:
				successor = None
				predecessor = server_list[index-1]
			else:
				predecessor = server_list[index-1]
				successor = server_list[index+1]
			setup(server,[item.bankname,item.server.startupdelay,item.server.serverlifetime,successor,predecessor,master])
			start(server)
		client_list = list(new(Client,num = item.no_clients))	
		bank_client_chain[item.bankname] = client_list
		for index,client in enumerate(client_list):
			if Request_Type == 'Random':
				setup(client,[item.bankname,item.client.reply_wait,item.client.num_retry,item.client.request_details,server_list[0],server_list[-1],master])
			else:
				setup(client,[item.bankname,item.client.reply_wait,item.client.num_retry,item.client.request_details[index],server_list[0],server_list[-1],master])
			start(client)
	setup(master,[bank_server_chain,bank_client_chain])
	start(master)

