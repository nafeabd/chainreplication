#!/usr/bin/env python3
import sys
import re
class Client(process):

	def setup(bankname,seed,numreq,prob_bal,prob_dep,prob_withdraw,reply_wait,no_retry,head,tail):
		self.client_id = self.id._address[1]
		output('client id:'+str(client_id))
		#output('BankName:'+bankname)
		#output('Head:'+str(head))
		#output('Tail:'+str(tail))

	def main():
		#Generate requests based on probabilities and sent to servers
		msg = 'hi'
		send((msg,self.id), to=head)
		await(False)
	def receive(msg=(msg,p)):
		output('msg from tail:'+msg)
		output('tail id:'+str(p))	
		
		

class Server(process):
	
	def setup(bankname,startupdelay,successor,predecessor):
		self.server_id = self.id._address[1]
		output('Server id: '+str(server_id))
		#output('Predecessor id:'+str(predecessor))
		#output('Sucessor id:'+str(successor))
	def main():
		await(False)	
	def receive(msg=(msg,clientid)):
		#output("clientid:"+str(clientid))
		output("msg:"+msg)
		if self.successor is not None:
			send((msg,clientid),to=successor)
		else:
			send((msg,self.id),to=clientid)
		

class Client_Details:

	def __init__(self,seed,bankname,numReq,probGetBalance,probDeposit,probWithdraw,reply_wait,no_retry):
		self.seed = seed
		self.bankname = bankname
		self.numReq = numReq
		self.probGetBalance = probGetBalance
		self.probDeposit = probDeposit
		self.probWithdraw = probWithdraw
		self.reply_wait = reply_wait
		self.no_retry = no_retry

	def displayClientDetails(self):
		print("--Client details--\n")
		print("seed:",self.seed)
		print("bankname:",self.bankname)
		print("numReq:",self.numReq)
		print("probGetBal:",self.probGetBalance)
		print("probGetDeposit:",self.probDeposit)
		print("probWithdraw:",self.probWithdraw)
		print("reply_wait:",self.reply_wait)
		print("no_retry:",self.no_retry)


class Server_Details:

        def __init__(self,startupdelay):
                self.startupdelay = startupdelay

        def displayServerDetails(self):
                print("--Server details--\n")
                print("startupdelay:",self.startupdelay)


class Bank_Details:
	def __init__(self,bankname,chainlen,no_clients,client,server):
		self.bankname = bankname
		self.chainlen = chainlen
		self.no_clients = no_clients
		self.client = client
		self.server = server

	def displayBankDetails(self):
		print("Bankname:",self.bankname)
		print("chainlen:",self.chainlen)
		print("no_clients:",self.no_clients)
		self.client.displayClientDetails()
		self.server.displayServerDetails()
		
def main():
	
	config_file = '/Users/NafeesAhmed/Documents/async_project/chainreplication/config/test1_config.txt'
	#config_file = sys.argv[1]
	#nrounds = int(sys.argv[1]) if len(sys.argv) > 1 else 3
	#npings = int(sys.argv[2]) if len(sys.argv) > 2 else 3
	#config(clock='Lamport')
	
	#with open(config_file,'r') as f:
	bank_list = []
	f = open(config_file)
	lines = f.readlines()
	for line in lines:
			if len(line.strip()) == 0:
				continue	
			if line.startswith('Num_Banks'):
				num_banks = line.strip().split(':')[1]
			
			if line.startswith('<Bank-Start>'):
				continue
				
			if line.startswith('Bank_Name:'):
				bank_name = line.strip().split(':')[1]	
			
			if line.startswith('Start_Up_Delay:'):
				start_up_delay = line.strip().split(':')[1]
	
			if line.startswith('Len_of_chain:'):
                                chain_len = int(line.strip().split(':')[1])
			
			if line.startswith('No_Clients:'):
                                no_clients = int(line.strip().split(':')[1])		


			if line.startswith('reply_wait:'):
                                reply_wait = line.strip().split(':')[1]

			if line.startswith('num_retry:'):
                                num_retry = line.strip().split(':')[1]

			if line.startswith('Random:'):
				temp = line.strip().split(':')[1]
				seed,numReq,probgetbal,probgetdep,probgetwithdraw = re.sub(r'[()]','',temp).strip().split(',')
			if line.startswith('<Bank-End>'):
				client = Client_Details(seed,bank_name,numReq,probgetbal,probgetdep,probgetwithdraw,reply_wait,num_retry)
				server = Server_Details(start_up_delay)
				bank = Bank_Details(bank_name,chain_len,no_clients,client,server)
				bank_list.append(bank)
	f.close()
	#Do validation for no of banks
	#Create client process for each bank
	for item in bank_list:
		server_list = list(new(Server,num = item.chainlen))
		print('len of servers:',len(server_list))
		print('server_list:',server_list)
		
		for index,server in enumerate(server_list):
			#Server is Head
			if index == 0 and len(server_list) > 1:
				predecessor = None
				successor = server_list[index+1]
			elif index == 0 and len(server_list) == 1:
				predecessor = None
				successor = None
			#Server is Tail
			elif index == len(server_list)-1:
				successor = None
				predecessor = server_list[index-1]
			else:
				predecessor = server_list[index-1]
				successor = server_list[index+1]
			setup(server,[item.bankname,item.server.startupdelay,successor,predecessor])
			start(server)			
		clients = new(Client,[item.bankname,item.client.seed,item.client.numReq,item.client.probGetBalance,item.client.probDeposit,item.client.probWithdraw,item.client.reply_wait,item.client.no_retry,server_list[0],server_list[-1]],num = item.no_clients)
		start(clients)
	

